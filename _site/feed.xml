<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-04T16:38:42-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Daniel M. Watkins, PhD</title><subtitle>Climate scientist specializing in Arctic sea ice and the atmospheric boundary layer.</subtitle><author><name>Daniel Watkins</name></author><entry><title type="html">LEGO, Satellites, and Sea Ice</title><link href="http://localhost:4000/blog/legos-satellites-and-sea-ice/" rel="alternate" type="text/html" title="LEGO, Satellites, and Sea Ice" /><published>2023-01-04T00:00:00-05:00</published><updated>2023-01-04T00:00:00-05:00</updated><id>http://localhost:4000/blog/legos-satellites-and-sea-ice</id><content type="html" xml:base="http://localhost:4000/blog/legos-satellites-and-sea-ice/">&lt;p&gt;(Stub: will fill this out soon)&lt;/p&gt;

&lt;p&gt;In fall 2018, I participated in the Oregon Museum of Science and Industry’s Science Communication Fellowship program.&lt;/p&gt;</content><author><name>Daniel Watkins</name></author><category term="Blog" /><category term="LEGO" /><category term="science demos" /><category term="activities" /><summary type="html">(Stub: will fill this out soon)</summary></entry><entry><title type="html">Getting started with Julia</title><link href="http://localhost:4000/blog/getting-started-with-julia/" rel="alternate" type="text/html" title="Getting started with Julia" /><published>2022-09-09T00:00:00-04:00</published><updated>2022-09-09T00:00:00-04:00</updated><id>http://localhost:4000/blog/getting-started-with-julia</id><content type="html" xml:base="http://localhost:4000/blog/getting-started-with-julia/">&lt;p&gt;Julia is a programming language designed for fast scientific computing. It aims to take the readability of Python and Matlab and couple that with the speed of C and Fortran. It also happens to be the language that a key piece of software in my lab is written in, so it’s one I need to learn how to use. This post describes how I got up and running with Julia in a Jupyter Notebook on a M1 Mac.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Go to the &lt;a href=&quot;https://julialang.org/downloads/&quot;&gt;Julia download page&lt;/a&gt;. Download the one that matches your system. For Mac, installation is as simple as dragging the icon into the applications folder.&lt;/p&gt;

&lt;h2 id=&quot;make-julia-accessible-from-terminal&quot;&gt;Make Julia accessible from Terminal&lt;/h2&gt;
&lt;p&gt;I usually launch Jupyter from within a conda environment in the Terminal. To access Julia from Terminal it needs to be added to the path. Instructions from the &lt;a href=&quot;https://julialang.org/downloads/platform/#macos&quot;&gt;Julia docs&lt;/a&gt; are reproduced here:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir -p /usr/local/bin
sudo rm -f /usr/local/bin/julia
sudo ln -s /Applications/Julia-1.8.app/Contents/Resources/julia/bin/julia /usr/local/bin/julia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once you’ve run that, Terminal should know what you mean when you type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;julia&lt;/code&gt;. Go ahead and type that into a Terminal window and you should see:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type &quot;?&quot; for help, &quot;]?&quot; for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.0 (2022-08-17)
 _/ |\__&apos;_|_|_|\__&apos;_|  |  Official https://julialang.org/ release
|__/                   |

julia&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;getting-ready-for-jupyter&quot;&gt;Getting ready for Jupyter&lt;/h2&gt;
&lt;p&gt;The next step is to add the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IJulia&lt;/code&gt; package so that Jupyter can access the Julia kernel.
The instructions for this are &lt;a href=&quot;https://julialang.github.io/IJulia.jl/stable/manual/installation/&quot;&gt;here&lt;/a&gt;. In the same Terminal window where you launched Julia, we’ll use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pkg&lt;/code&gt; package to install IJulia.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;using Pkg
Pkg.add(&quot;IJulia&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;For future reference, if Julia gets updated or moved, you’ll need to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pkg.build(&quot;IJulia&quot;)&lt;/code&gt; or else it’ll stop working. If you already have the Anaconda distribution of Python installed, you’re good to go. If not, see the linked IJulia documentation for further instructions.&lt;/p&gt;

&lt;h2 id=&quot;running-julia-in-a-jupyter-notebook&quot;&gt;Running Julia in a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;At this point there’s little else to do but to open a Jupyter notebook in the usual way: that is, by typing&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in Terminal. Once Jupyter has opened in your browser, you can make a new notebook and you should have Julia as an option in the dropdown menu.&lt;/p&gt;</content><author><name>Daniel Watkins</name></author><category term="Blog" /><category term="julia" /><category term="programming" /><category term="scientific computing" /><summary type="html">Julia is a programming language designed for fast scientific computing. It aims to take the readability of Python and Matlab and couple that with the speed of C and Fortran. It also happens to be the language that a key piece of software in my lab is written in, so it’s one I need to learn how to use. This post describes how I got up and running with Julia in a Jupyter Notebook on a M1 Mac.</summary></entry></feed>